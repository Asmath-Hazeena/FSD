APP .JS








const express = require("express");
const mongoose = require("mongoose");
const cors = require("cors");

const app = express();
app.use(express.json());
app.use(cors());

// Connect to MongoDB
mongoose
  .connect("mongodb://localhost:27017/userDB", {
    useNewUrlParser: true,
    useUnifiedTopology: true,
  })
  .then(() => console.log("MongoDB connected"))
  .catch((err) => console.error(err));

// Schema and model
const userSchema = new mongoose.Schema(
  {
    name: { type: String, required: true },
    email: { type: String, required: true, unique: true },
    age: { type: Number, required: true },
  },
  { timestamps: true }
);

const User = mongoose.model("User", userSchema);

// Routes
app.post("/users", async (req, res) => {
  try {
    const { name, email, age } = req.body;
    if (!name || !email || !age) {
      return res.status(400).json({ message: "All fields are required." });
    }
    const newUser = new User({ name, email, age });
    await newUser.save();
    res.status(201).json(newUser);
  } catch (err) {
    res.status(400).json({ message: err.message });
  }
});

app.get("/users", async (req, res) => {
  try {
    const users = await User.find();
    res.json(users);
  } catch (err) {
    res.status(500).json({ message: err.message });
  }
});

app.put("/users/:id", async (req, res) => {
  try {
    const { name, email, age } = req.body;
    if (!name || !email || !age) {
      return res.status(400).json({ message: "All fields are required." });
    }
    const updated = await User.findByIdAndUpdate(
      req.params.id,
      { name, email, age },
      { new: true }
    );
    if (!updated) return res.status(404).json({ message: "User not found." });
    res.json(updated);
  } catch (err) {
    res.status(400).json({ message: err.message });
  }
});

app.delete("/users/:id", async (req, res) => {
  try {
    const deleted = await User.findByIdAndDelete(req.params.id);
    if (!deleted) return res.status(404).json({ message: "User not found." });
    res.status(204).send();
  } catch (err) {
    res.status(400).json({ message: err.message });
  }
});

app.listen(5000, () => console.log("Server running on http://localhost:5000"));



server.js



import React, { useState, useEffect } from "react";
import axios from "axios";

const API_URL = "http://localhost:5000/users";

function App() {
  const [users, setUsers] = useState([]);
  const [newUser, setNewUser] = useState({ name: "", email: "", age: "" });
  const [editUser, setEditUser] = useState({
    id: "",
    name: "",
    email: "",
    age: "",
  });

  const fetchUsers = async () => {
    try {
      const res = await axios.get(API_URL);
      setUsers(res.data);
    } catch (error) {
      console.error("Error fetching users:", error);
    }
  };

  useEffect(() => {
    fetchUsers();
  }, []);

  const createUser = async () => {
    const { name, email, age } = newUser;
    if (!name || !email || !age) {
      return alert("All fields are required to create a user.");
    }

    try {
      await axios.post(API_URL, {
        name,
        email,
        age: Number(age),
      });
      setNewUser({ name: "", email: "", age: "" });
      await fetchUsers();
    } catch (error) {
      console.error("Error creating user:", error);
    }
  };

  const updateUser = async () => {
    const { id, name, email, age } = editUser;
    if (!name || !email || !age) {
      return alert("All fields are required to update the user.");
    }

    try {
      await axios.put(${API_URL}/${id}, {
        name,
        email,
        age: Number(age),
      });
      setEditUser({ id: "", name: "", email: "", age: "" });
      await fetchUsers();
    } catch (error) {
      console.error("Error updating user:", error);
    }
  };

  const deleteUser = async (id) => {
    try {
      await axios.delete(${API_URL}/${id});
      await fetchUsers();
    } catch (error) {
      console.error("Error deleting user:", error);
    }
  };

  const inputStyle = {
    margin: "8px",
    padding: "10px",
    width: "calc(100% - 22px)",
    borderRadius: "5px",
    border: "1px solid #ccc",
  };

  const buttonStyle = {
    margin: "8px",
    padding: "10px 20px",
    backgroundColor: "#007bff",
    color: "white",
    border: "none",
    borderRadius: "5px",
    cursor: "pointer",
  };

  const formStyle = {
    marginBottom: "30px",
    padding: "20px",
    background: "#f8f9fa",
    borderRadius: "8px",
    boxShadow: "0 2px 8px rgba(0,0,0,0.1)",
    maxWidth: "500px",
  };

  const cardStyle = {
    border: "1px solid #ddd",
    borderRadius: "8px",
    padding: "15px",
    marginBottom: "20px",
    backgroundColor: "#fff",
    boxShadow: "0 2px 6px rgba(0,0,0,0.05)",
  };

  return (
    <div
      style={{
        padding: "40px",
        fontFamily: "Arial, sans-serif",
        background: "#f0f2f5",
        minHeight: "100vh",
      }}
    >
      <h1 style={{ textAlign: "center", marginBottom: "40px" }}>
        User Management Dashboard
      </h1>

      {/* Create Form */}
      <div style={formStyle}>
        <h2>Create User</h2>
        <input
          style={inputStyle}
          type="text"
          placeholder="Name"
          value={newUser.name}
          onChange={(e) => setNewUser({ ...newUser, name: e.target.value })}
        />
        <input
          style={inputStyle}
          type="email"
          placeholder="Email"
          value={newUser.email}
          onChange={(e) => setNewUser({ ...newUser, email: e.target.value })}
        />
        <input
          style={inputStyle}
          type="number"
          placeholder="Age"
          value={newUser.age}
          onChange={(e) => setNewUser({ ...newUser, age: e.target.value })}
        />
        <button style={buttonStyle} onClick={createUser}>
          Create User
        </button>
      </div>

      {/* Edit Form */}
      {editUser.id && (
        <div style={formStyle}>
          <h2>Edit User</h2>
          <input
            style={inputStyle}
            type="text"
            placeholder="Name"
            value={editUser.name}
            onChange={(e) => setEditUser({ ...editUser, name: e.target.value })}
          />
          <input
            style={inputStyle}
            type="email"
            placeholder="Email"
            value={editUser.email}
            onChange={(e) =>
              setEditUser({ ...editUser, email: e.target.value })
            }
          />
          <input
            style={inputStyle}
            type="number"
            placeholder="Age"
            value={editUser.age}
            onChange={(e) => setEditUser({ ...editUser, age: e.target.value })}
          />
          <button style={buttonStyle} onClick={updateUser}>
            Update User
          </button>
        </div>
      )}

      {/* User List */}
      <h2>User List</h2>
      {users.length > 0 ? (
        users.map((user) => (
          <div key={user._id} style={cardStyle}>
            <h3>{user.name}</h3>
            <p>
              <strong>Email:</strong> {user.email}
            </p>
            <p>
              <strong>Age:</strong> {user.age}
            </p>
            <div>
              <button
                style={{ ...buttonStyle, backgroundColor: "#28a745" }}
                onClick={() =>
                  setEditUser({
                    id: user._id,
                    name: user.name,
                    email: user.email,
                    age: user.age,
                  })
                }
              >
                Edit
              </button>
              <button
                style={{
                  ...buttonStyle,
                  backgroundColor: "#dc3545",
                  marginLeft: "10px",
                }}
                onClick={() => deleteUser(user._id)}
              >
                Delete
              </button>
            </div>
          </div>
        ))
      ) : (
        <p>No users found.</p>
      )}
    </div>
  );
}

export default App;
